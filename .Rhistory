biomart<-join(biomart,uniprot_meta,by = "uniprot")
genes<-join(data.frame(Gene=rownames(DEG_counts),stringsAsFactors = FALSE),biomart)
genes$func<-NULL
genes$name<-NULL
genes$uniprot<-NULL
genes<-genes[!duplicated(genes$Gene),]
names(genes)[1]<-"ENSEMBL"
## Final plot and placement into directories
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],folder=file.path("DGE_plots",TISSUE),
side.main="hgnc", counts=DEG_lcpm, groups=DEG_meta$AGE,anno=genes)
glMDSPlot(DEG_lcpm, groups=DEG_meta[,c("SMTS","SMTSD","AGE","SEX","DTHHRDY")], folder=file.path("DGE_plots",TISSUE))
}
A1vA5 <- topTreat(tfit, coef=1, n=Inf)
A1vA5 <- topTreat(dt, coef=1, n=Inf)
dt@.Data
x<-dt@.Data
View(x)
dt@.Data
tfit@.Data
x<-tfit@.Data
View(x)
for(TISSUE in c("Liver")) {
dir.create(path = file.path("DGE_plots",TISSUE),recursive = TRUE,showWarnings = FALSE)
TISSUE<-"Liver"
keep<-meta$AGE!="" & meta$SMTS==TISSUE
DEG_meta<-meta[keep,]
DEG_counts<-counts[,keep]
#rm(counts)
## Changing age to numeric
#DEG_meta$AGE<-as.numeric(str_extract(DEG_meta$AGE,"[:digit:]+"))+5 # convert to middle value
DEG_meta$AGE<-paste0("A",as.numeric(factor(DEG_meta$AGE))) # convert to friendly group
DEG_meta$SMTS<-gsub(" ","",DEG_meta$SMTS) # still relevant
print(paste0("Input: ",nrow(DEG_counts)))
keep.exprs <- filterByExpr(DEG_counts$counts,group=factor(DEG_meta$AGE),min.count = 10) #first thing the function does is convert counts to matrix. MinSamples=10+(n-10)*.7
DEG_counts <- DEG_counts[keep.exprs,, keep.lib.sizes=FALSE]
print(paste0("Output: ",nrow(DEG_counts)))
DEG_lcpm<-cpm(DEG_counts,log = TRUE)
## DEG
DEG_meta$SEX<-factor(DEG_meta$SEX) # 1 is male 2 is female
levels(DEG_meta$SEX)<-list(M=c("1"),FE=c("2"))
grouping <- with(data = DEG_meta,factor(paste0(AGE,"_", SEX)))
#design<-model.matrix(~0+AGE+SEX:AGE,data=DEG_meta)
design<-model.matrix(~0+AGE,data=DEG_meta)
colnames(design)<-str_remove(colnames(design),"AGE")
#design<-model.matrix(~0+grouping)
#colnames(design)<-str_remove(colnames(design),"grouping")
#colnames(design)<-gsub("\\:","",colnames(design))
contr.matrix <- makeContrasts(
#  #A4vA5=A4-A5,
#  #A3vA4=A3-A4,
#  #A3vA5=A3-A5,
#  #A2vA3=A2-A3,
#  A2vA4=A2-A4,
#  A2vA5=A2-A5,
#  #A1vA2=A1-A2,
#  #A1vA3= A1-A3,
#  A1vA4= A1-A4,
LAvHA= (A1+A2+A3)/3-(A5+A2+A3)/3,
levels = colnames(design))
#contr.matrix <- makeContrasts(
#A4vA5=A4-A5,
#A3vA4=A3-A4,
#A3vA5=A3-A5,
#A2vA3=A2-A3,
#A3vA4_FE=A3_FE-A4_FE,
#A3vA5_FE=A3_FE-A5_FE,
#A3vA4_M=A3_M-A4_M,
#A3vA5_M=A3_M-A5_M,
#  A2vA4_FE=A2_FE-A4_FE, # 5
#A2vA5_FE=A2_FE-A5_FE,
#A2vA4_M=A2_M-A4_M,
#A2vA5_M=A2_M-A5_M,
#A1vA2=A1-A2,
#A1vA3= A1-A3,
#A1vA3_FE=A3_FE-A4_FE,
#A1vA3_M=A3_M-A5_M,
#A1vA4_FE= A1_FE-A4_FE,
#A1vA5_FE= A1_FE-A5_FE,
#A1vA4_M= A1_FE-A4_M,
#A1vA5_M= A1_FE-A5_M,
#  levels = colnames(design))
png(filename = file.path("DGE_plots",TISSUE,"Init_SA.png"))
v <- voom(DEG_counts, design, plot=TRUE)
dev.off()
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
png(filename = file.path("DGE_plots",TISSUE,"Final_SA.png"))
plotSA(efit, main="Final model: Mean-variance trend")
dev.off()
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit,p.value = .05)
### Getting gene annotation
biomart<-filterBiomart(biomart_file_path)
## one time uniprot file creation for uniprot_topology_parser.py
#uniprot<-biomart[!is.na(biomart$uniprot),]$uniprot
#write.table(uniprot,"uniprot_ids.txt",quote = FALSE,col.names = FALSE,row.names = FALSE)
##
uniprot_meta<-data.table::fread(uniprot_meta_path,header=FALSE,sep = "\t")
names(uniprot_meta)<-c("uniprot","name","desc","sub","topology","func")
biomart<-join(biomart,uniprot_meta,by = "uniprot")
genes<-join(data.frame(Gene=rownames(DEG_counts),stringsAsFactors = FALSE),biomart)
genes$func<-NULL
genes$name<-NULL
genes$uniprot<-NULL
genes<-genes[!duplicated(genes$Gene),]
names(genes)[1]<-"ENSEMBL"
## Final plot and placement into directories
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],folder=file.path("DGE_plots",TISSUE),
side.main="hgnc", counts=DEG_lcpm, groups=DEG_meta$AGE,anno=genes)
glMDSPlot(DEG_lcpm, groups=DEG_meta[,c("SMTS","SMTSD","AGE","SEX","DTHHRDY")], folder=file.path("DGE_plots",TISSUE))
}
x<-topTreat(tfit,coef=1,n=Inf)
View(x)
data.table::fwrite(topTreat(tfit,coef=1,n=Inf),file = file.path("DGE_plots",TISSUE,"DGE_results.tsv"),sep = "\t")
data.table::fwrite(topTreat(tfit,coef=1,n=Inf),file = file.path("DGE_plots",TISSUE,"DGE_results.tsv"),sep = "\t",row.names = TRUE)
for(TISSUE in unique(meta$SMTS)) {
#for(TISSUE in c("Liver")) {
dir.create(path = file.path("DGE_plots",TISSUE),recursive = TRUE,showWarnings = FALSE)
keep<-meta$AGE!="" & meta$SMTS==TISSUE
DEG_meta<-meta[keep,]
DEG_counts<-counts[,keep]
#rm(counts)
## Changing age to numeric
#DEG_meta$AGE<-as.numeric(str_extract(DEG_meta$AGE,"[:digit:]+"))+5 # convert to middle value
DEG_meta$AGE<-paste0("A",as.numeric(factor(DEG_meta$AGE))) # convert to friendly group
DEG_meta$SMTS<-gsub(" ","",DEG_meta$SMTS) # still relevant
print(paste0("Input: ",nrow(DEG_counts)))
keep.exprs <- filterByExpr(DEG_counts$counts,group=factor(DEG_meta$AGE),min.count = 10) #first thing the function does is convert counts to matrix. MinSamples=10+(n-10)*.7
DEG_counts <- DEG_counts[keep.exprs,, keep.lib.sizes=FALSE]
print(paste0("Output: ",nrow(DEG_counts)))
DEG_lcpm<-cpm(DEG_counts,log = TRUE)
## DEG
DEG_meta$SEX<-factor(DEG_meta$SEX) # 1 is male 2 is female
levels(DEG_meta$SEX)<-list(M=c("1"),FE=c("2"))
grouping <- with(data = DEG_meta,factor(paste0(AGE,"_", SEX)))
#design<-model.matrix(~0+AGE+SEX:AGE,data=DEG_meta)
design<-model.matrix(~0+AGE,data=DEG_meta)
colnames(design)<-str_remove(colnames(design),"AGE")
#design<-model.matrix(~0+grouping)
#colnames(design)<-str_remove(colnames(design),"grouping")
#colnames(design)<-gsub("\\:","",colnames(design))
contr.matrix <- makeContrasts(
#  #A4vA5=A4-A5,
#  #A3vA4=A3-A4,
#  #A3vA5=A3-A5,
#  #A2vA3=A2-A3,
#  A2vA4=A2-A4,
#  A2vA5=A2-A5,
#  #A1vA2=A1-A2,
#  #A1vA3= A1-A3,
#  A1vA4= A1-A4,
LAvHA= (A1+A2+A3)/3-(A5+A2+A3)/3,
levels = colnames(design))
#contr.matrix <- makeContrasts(
#A4vA5=A4-A5,
#A3vA4=A3-A4,
#A3vA5=A3-A5,
#A2vA3=A2-A3,
#A3vA4_FE=A3_FE-A4_FE,
#A3vA5_FE=A3_FE-A5_FE,
#A3vA4_M=A3_M-A4_M,
#A3vA5_M=A3_M-A5_M,
#  A2vA4_FE=A2_FE-A4_FE, # 5
#A2vA5_FE=A2_FE-A5_FE,
#A2vA4_M=A2_M-A4_M,
#A2vA5_M=A2_M-A5_M,
#A1vA2=A1-A2,
#A1vA3= A1-A3,
#A1vA3_FE=A3_FE-A4_FE,
#A1vA3_M=A3_M-A5_M,
#A1vA4_FE= A1_FE-A4_FE,
#A1vA5_FE= A1_FE-A5_FE,
#A1vA4_M= A1_FE-A4_M,
#A1vA5_M= A1_FE-A5_M,
#  levels = colnames(design))
png(filename = file.path("DGE_plots",TISSUE,"Init_SA.png"))
v <- voom(DEG_counts, design, plot=TRUE)
dev.off()
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
png(filename = file.path("DGE_plots",TISSUE,"Final_SA.png"))
plotSA(efit, main="Final model: Mean-variance trend")
dev.off()
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit,p.value = .05)
### Getting gene annotation
biomart<-filterBiomart(biomart_file_path)
## one time uniprot file creation for uniprot_topology_parser.py
#uniprot<-biomart[!is.na(biomart$uniprot),]$uniprot
#write.table(uniprot,"uniprot_ids.txt",quote = FALSE,col.names = FALSE,row.names = FALSE)
##
uniprot_meta<-data.table::fread(uniprot_meta_path,header=FALSE,sep = "\t")
names(uniprot_meta)<-c("uniprot","name","desc","sub","topology","func")
biomart<-join(biomart,uniprot_meta,by = "uniprot")
genes<-join(data.frame(Gene=rownames(DEG_counts),stringsAsFactors = FALSE),biomart)
genes$func<-NULL
genes$name<-NULL
genes$uniprot<-NULL
genes<-genes[!duplicated(genes$Gene),]
names(genes)[1]<-"ENSEMBL"
## Final plot and placement into directories
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],folder=file.path("DGE_plots",TISSUE),
side.main="hgnc", counts=DEG_lcpm, groups=DEG_meta$AGE,anno=genes)
glMDSPlot(DEG_lcpm, groups=DEG_meta[,c("SMTS","SMTSD","AGE","SEX","DTHHRDY")], folder=file.path("DGE_plots",TISSUE))
data.table::fwrite(topTreat(tfit,coef=1,n=Inf),file = file.path("DGE_plots",TISSUE,"DGE_results.tsv"),sep = "\t",row.names = TRUE)
}
for(TISSUE in unique(meta$SMTS)) {
#for(TISSUE in c("Liver")) {
dir.create(path = file.path("DGE_plots",TISSUE),recursive = TRUE,showWarnings = FALSE)
keep<-meta$AGE!="" & meta$SMTS==TISSUE
DEG_meta<-meta[keep,]
DEG_counts<-counts[,keep]
#rm(counts)
## Changing age to numeric
#DEG_meta$AGE<-as.numeric(str_extract(DEG_meta$AGE,"[:digit:]+"))+5 # convert to middle value
DEG_meta$AGE<-paste0("A",as.numeric(factor(DEG_meta$AGE))) # convert to friendly group
DEG_meta$SMTS<-gsub(" ","",DEG_meta$SMTS) # still relevant
print(paste0("Input: ",nrow(DEG_counts)))
keep.exprs <- filterByExpr(DEG_counts$counts,group=factor(DEG_meta$AGE),min.count = 10) #first thing the function does is convert counts to matrix. MinSamples=10+(n-10)*.7
DEG_counts <- DEG_counts[keep.exprs,, keep.lib.sizes=FALSE]
print(paste0("Output: ",nrow(DEG_counts)))
DEG_lcpm<-cpm(DEG_counts,log = TRUE)
## DEG
DEG_meta$SEX<-factor(DEG_meta$SEX) # 1 is male 2 is female
levels(DEG_meta$SEX)<-list(M=c("1"),FE=c("2"))
grouping <- with(data = DEG_meta,factor(paste0(AGE,"_", SEX)))
#design<-model.matrix(~0+AGE+SEX:AGE,data=DEG_meta)
design<-model.matrix(~0+AGE,data=DEG_meta)
colnames(design)<-str_remove(colnames(design),"AGE")
#design<-model.matrix(~0+grouping)
#colnames(design)<-str_remove(colnames(design),"grouping")
#colnames(design)<-gsub("\\:","",colnames(design))
contr.matrix <- makeContrasts(
#  #A4vA5=A4-A5,
#  #A3vA4=A3-A4,
#  #A3vA5=A3-A5,
#  #A2vA3=A2-A3,
#  A2vA4=A2-A4,
#  A2vA5=A2-A5,
#  #A1vA2=A1-A2,
#  #A1vA3= A1-A3,
#  A1vA4= A1-A4,
LAvHA= (A1+A2+A3)/3-(A3+A4+A5)/3,
levels = colnames(design))
#contr.matrix <- makeContrasts(
#A4vA5=A4-A5,
#A3vA4=A3-A4,
#A3vA5=A3-A5,
#A2vA3=A2-A3,
#A3vA4_FE=A3_FE-A4_FE,
#A3vA5_FE=A3_FE-A5_FE,
#A3vA4_M=A3_M-A4_M,
#A3vA5_M=A3_M-A5_M,
#  A2vA4_FE=A2_FE-A4_FE, # 5
#A2vA5_FE=A2_FE-A5_FE,
#A2vA4_M=A2_M-A4_M,
#A2vA5_M=A2_M-A5_M,
#A1vA2=A1-A2,
#A1vA3= A1-A3,
#A1vA3_FE=A3_FE-A4_FE,
#A1vA3_M=A3_M-A5_M,
#A1vA4_FE= A1_FE-A4_FE,
#A1vA5_FE= A1_FE-A5_FE,
#A1vA4_M= A1_FE-A4_M,
#A1vA5_M= A1_FE-A5_M,
#  levels = colnames(design))
png(filename = file.path("DGE_plots",TISSUE,"Init_SA.png"))
v <- voom(DEG_counts, design, plot=TRUE)
dev.off()
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
png(filename = file.path("DGE_plots",TISSUE,"Final_SA.png"))
plotSA(efit, main="Final model: Mean-variance trend")
dev.off()
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit,p.value = .05)
### Getting gene annotation
biomart<-filterBiomart(biomart_file_path)
## one time uniprot file creation for uniprot_topology_parser.py
#uniprot<-biomart[!is.na(biomart$uniprot),]$uniprot
#write.table(uniprot,"uniprot_ids.txt",quote = FALSE,col.names = FALSE,row.names = FALSE)
##
uniprot_meta<-data.table::fread(uniprot_meta_path,header=FALSE,sep = "\t")
names(uniprot_meta)<-c("uniprot","name","desc","sub","topology","func")
biomart<-join(biomart,uniprot_meta,by = "uniprot")
genes<-join(data.frame(Gene=rownames(DEG_counts),stringsAsFactors = FALSE),biomart)
genes$func<-NULL
genes$name<-NULL
genes$uniprot<-NULL
genes<-genes[!duplicated(genes$Gene),]
names(genes)[1]<-"ENSEMBL"
## Final plot and placement into directories
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],folder=file.path("DGE_plots",TISSUE),
side.main="hgnc", counts=DEG_lcpm, groups=DEG_meta$AGE,anno=genes,launch = FALSE)
glMDSPlot(DEG_lcpm, groups=DEG_meta[,c("SMTS","SMTSD","AGE","SEX","DTHHRDY")], folder=file.path("DGE_plots",TISSUE),launch=FALSE)
data.table::fwrite(topTreat(tfit,coef=1,n=Inf),file = file.path("DGE_plots",TISSUE,"DGE_results.tsv"),sep = "\t",row.names = TRUE)
}
unique(meta$SMTS)
for(TISSUE in c("Brain")) {
dir.create(path = file.path("DGE_plots",TISSUE),recursive = TRUE,showWarnings = FALSE)
keep<-meta$AGE!="" & meta$SMTS==TISSUE
DEG_meta<-meta[keep,]
DEG_counts<-counts[,keep]
#rm(counts)
## Changing age to numeric
#DEG_meta$AGE<-as.numeric(str_extract(DEG_meta$AGE,"[:digit:]+"))+5 # convert to middle value
DEG_meta$AGE<-paste0("A",as.numeric(factor(DEG_meta$AGE))) # convert to friendly group
}
View(DEG_meta)
x<-counts(meta$SMTS)
x<-table(meta$SMTS)
x
x>175
y<-x>175
y
y[y==TRUE]
as.character(y[y==TRUE])
tiss_table<-table(meta$SMTS)>175
names(tiss_table[tiss_table==TRUE])
View(DEG_meta)
tiss_table<-table(meta$SMTS)>200
DEG_tissues<-names(tiss_table[tiss_table==TRUE])
for(TISSUE in DEG_tissues) {
#for(TISSUE in c("Brain")) {
dir.create(path = file.path("DGE_plots",TISSUE),recursive = TRUE,showWarnings = FALSE)
keep<-meta$AGE!="" & meta$SMTS==TISSUE
DEG_meta<-meta[keep,]
DEG_counts<-counts[,keep]
#rm(counts)
## Changing age to numeric
#DEG_meta$AGE<-as.numeric(str_extract(DEG_meta$AGE,"[:digit:]+"))+5 # convert to middle value
DEG_meta$AGE<-paste0("A",as.numeric(factor(DEG_meta$AGE))) # convert to friendly group
DEG_meta$SMTS<-gsub(" ","",DEG_meta$SMTS) # still relevant
print(paste0("Input: ",nrow(DEG_counts)))
keep.exprs <- filterByExpr(DEG_counts$counts,group=factor(DEG_meta$AGE),min.count = 10) #first thing the function does is convert counts to matrix. MinSamples=10+(n-10)*.7
DEG_counts <- DEG_counts[keep.exprs,, keep.lib.sizes=FALSE]
print(paste0("Output: ",nrow(DEG_counts)))
DEG_lcpm<-cpm(DEG_counts,log = TRUE)
## DEG
DEG_meta$SEX<-factor(DEG_meta$SEX) # 1 is male 2 is female
levels(DEG_meta$SEX)<-list(M=c("1"),FE=c("2"))
grouping <- with(data = DEG_meta,factor(paste0(AGE,"_", SEX)))
#design<-model.matrix(~0+AGE+SEX:AGE,data=DEG_meta)
design<-model.matrix(~0+AGE,data=DEG_meta)
colnames(design)<-str_remove(colnames(design),"AGE")
#design<-model.matrix(~0+grouping)
#colnames(design)<-str_remove(colnames(design),"grouping")
#colnames(design)<-gsub("\\:","",colnames(design))
contr.matrix <- makeContrasts(
#  #A4vA5=A4-A5,
#  #A3vA4=A3-A4,
#  #A3vA5=A3-A5,
#  #A2vA3=A2-A3,
#  A2vA4=A2-A4,
#  A2vA5=A2-A5,
#  #A1vA2=A1-A2,
#  #A1vA3= A1-A3,
#  A1vA4= A1-A4,
LAvHA= (A1+A2+A3)/3-(A3+A4+A5)/3,
levels = colnames(design))
#contr.matrix <- makeContrasts(
#A4vA5=A4-A5,
#A3vA4=A3-A4,
#A3vA5=A3-A5,
#A2vA3=A2-A3,
#A3vA4_FE=A3_FE-A4_FE,
#A3vA5_FE=A3_FE-A5_FE,
#A3vA4_M=A3_M-A4_M,
#A3vA5_M=A3_M-A5_M,
#  A2vA4_FE=A2_FE-A4_FE, # 5
#A2vA5_FE=A2_FE-A5_FE,
#A2vA4_M=A2_M-A4_M,
#A2vA5_M=A2_M-A5_M,
#A1vA2=A1-A2,
#A1vA3= A1-A3,
#A1vA3_FE=A3_FE-A4_FE,
#A1vA3_M=A3_M-A5_M,
#A1vA4_FE= A1_FE-A4_FE,
#A1vA5_FE= A1_FE-A5_FE,
#A1vA4_M= A1_FE-A4_M,
#A1vA5_M= A1_FE-A5_M,
#  levels = colnames(design))
png(filename = file.path("DGE_plots",TISSUE,"Init_SA.png"))
v <- voom(DEG_counts, design, plot=TRUE)
dev.off()
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
png(filename = file.path("DGE_plots",TISSUE,"Final_SA.png"))
plotSA(efit, main="Final model: Mean-variance trend")
dev.off()
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit,p.value = .05)
### Getting gene annotation
biomart<-filterBiomart(biomart_file_path)
## one time uniprot file creation for uniprot_topology_parser.py
#uniprot<-biomart[!is.na(biomart$uniprot),]$uniprot
#write.table(uniprot,"uniprot_ids.txt",quote = FALSE,col.names = FALSE,row.names = FALSE)
##
uniprot_meta<-data.table::fread(uniprot_meta_path,header=FALSE,sep = "\t")
names(uniprot_meta)<-c("uniprot","name","desc","sub","topology","func")
biomart<-join(biomart,uniprot_meta,by = "uniprot")
genes<-join(data.frame(Gene=rownames(DEG_counts),stringsAsFactors = FALSE),biomart)
genes$func<-NULL
genes$name<-NULL
genes$uniprot<-NULL
genes<-genes[!duplicated(genes$Gene),]
names(genes)[1]<-"ENSEMBL"
## Final plot and placement into directories
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],folder=file.path("DGE_plots",TISSUE),
side.main="hgnc", counts=DEG_lcpm, groups=DEG_meta$AGE,anno=genes,launch = FALSE)
glMDSPlot(DEG_lcpm, groups=DEG_meta[,c("SMTS","SMTSD","AGE","SEX","DTHHRDY")], folder=file.path("DGE_plots",TISSUE),launch=FALSE)
data.table::fwrite(topTreat(tfit,coef=1,n=Inf),file = file.path("DGE_plots",TISSUE,"DGE_results.tsv"),sep = "\t",row.names = TRUE)
}
# Remove tissues with too few samples.
tiss_table<-table(meta$SMTS)>200
DEG_tissues<-names(tiss_table[tiss_table==TRUE])
for(TISSUE in DEG_tissues) {
#for(TISSUE in c("Brain")) {
dir.create(path = file.path("DGE_plots",TISSUE),recursive = TRUE,showWarnings = FALSE)
keep<-meta$AGE!="" & meta$SMTS==TISSUE
DEG_meta<-meta[keep,]
DEG_counts<-counts[,keep]
#rm(counts)
## Changing age to numeric
#DEG_meta$AGE<-as.numeric(str_extract(DEG_meta$AGE,"[:digit:]+"))+5 # convert to middle value
DEG_meta$AGE<-paste0("A",as.numeric(factor(DEG_meta$AGE))) # convert to friendly group
DEG_meta$SMTS<-gsub(" ","",DEG_meta$SMTS) # still relevant
print(paste0("Input: ",nrow(DEG_counts)))
keep.exprs <- filterByExpr(DEG_counts$counts,group=factor(DEG_meta$AGE),min.count = 10) #first thing the function does is convert counts to matrix. MinSamples=10+(n-10)*.7
DEG_counts <- DEG_counts[keep.exprs,, keep.lib.sizes=FALSE]
print(paste0("Output: ",nrow(DEG_counts)))
DEG_lcpm<-cpm(DEG_counts,log = TRUE)
## DEG
DEG_meta$SEX<-factor(DEG_meta$SEX) # 1 is male 2 is female
levels(DEG_meta$SEX)<-list(M=c("1"),FE=c("2"))
grouping <- with(data = DEG_meta,factor(paste0(AGE,"_", SEX)))
#design<-model.matrix(~0+AGE+SEX:AGE,data=DEG_meta)
design<-model.matrix(~0+AGE,data=DEG_meta)
colnames(design)<-str_remove(colnames(design),"AGE")
#design<-model.matrix(~0+grouping)
#colnames(design)<-str_remove(colnames(design),"grouping")
#colnames(design)<-gsub("\\:","",colnames(design))
contr.matrix <- makeContrasts(
#  #A4vA5=A4-A5,
#  #A3vA4=A3-A4,
#  #A3vA5=A3-A5,
#  #A2vA3=A2-A3,
#  A2vA4=A2-A4,
#  A2vA5=A2-A5,
#  #A1vA2=A1-A2,
#  #A1vA3= A1-A3,
#  A1vA4= A1-A4,
LAvHA= (A1+A2+A3)/3-(A4+A5+A6)/3,
levels = colnames(design))
#contr.matrix <- makeContrasts(
#A4vA5=A4-A5,
#A3vA4=A3-A4,
#A3vA5=A3-A5,
#A2vA3=A2-A3,
#A3vA4_FE=A3_FE-A4_FE,
#A3vA5_FE=A3_FE-A5_FE,
#A3vA4_M=A3_M-A4_M,
#A3vA5_M=A3_M-A5_M,
#  A2vA4_FE=A2_FE-A4_FE, # 5
#A2vA5_FE=A2_FE-A5_FE,
#A2vA4_M=A2_M-A4_M,
#A2vA5_M=A2_M-A5_M,
#A1vA2=A1-A2,
#A1vA3= A1-A3,
#A1vA3_FE=A3_FE-A4_FE,
#A1vA3_M=A3_M-A5_M,
#A1vA4_FE= A1_FE-A4_FE,
#A1vA5_FE= A1_FE-A5_FE,
#A1vA4_M= A1_FE-A4_M,
#A1vA5_M= A1_FE-A5_M,
#  levels = colnames(design))
png(filename = file.path("DGE_plots",TISSUE,"Init_SA.png"))
v <- voom(DEG_counts, design, plot=TRUE)
dev.off()
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
png(filename = file.path("DGE_plots",TISSUE,"Final_SA.png"))
plotSA(efit, main="Final model: Mean-variance trend")
dev.off()
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit,p.value = .05)
### Getting gene annotation
biomart<-filterBiomart(biomart_file_path)
## one time uniprot file creation for uniprot_topology_parser.py
#uniprot<-biomart[!is.na(biomart$uniprot),]$uniprot
#write.table(uniprot,"uniprot_ids.txt",quote = FALSE,col.names = FALSE,row.names = FALSE)
##
uniprot_meta<-data.table::fread(uniprot_meta_path,header=FALSE,sep = "\t")
names(uniprot_meta)<-c("uniprot","name","desc","sub","topology","func")
biomart<-join(biomart,uniprot_meta,by = "uniprot")
genes<-join(data.frame(Gene=rownames(DEG_counts),stringsAsFactors = FALSE),biomart)
genes$func<-NULL
genes$name<-NULL
genes$uniprot<-NULL
genes<-genes[!duplicated(genes$Gene),]
names(genes)[1]<-"ENSEMBL"
## Final plot and placement into directories
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],folder=file.path("DGE_plots",TISSUE),
side.main="hgnc", counts=DEG_lcpm, groups=DEG_meta$AGE,anno=genes,launch = FALSE)
glMDSPlot(DEG_lcpm, groups=DEG_meta[,c("SMTS","SMTSD","AGE","SEX","DTHHRDY")], folder=file.path("DGE_plots",TISSUE),launch=FALSE)
data.table::fwrite(topTreat(tfit,coef=1,n=Inf),file = file.path("DGE_plots",TISSUE,"DGE_results.tsv"),sep = "\t",row.names = TRUE)
}
